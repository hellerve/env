(let ()
  (define types
    (make-hash "id"       id
               "string"   string
               "number"   string->number
               "integer"  string->integer
               "float"    string->float
               "complex"  string->complex
               "ratio"    string->rational
               "list"     (curry regex:split r/\s+/)
               "vector"   ($ (list->vector (regex:split r/\s+/ %)))
               "hash-map" ($ (make-hash (regex:split r/\s+/ %)))))

  (define (parse-env-elem line)
    (let ((line (string:trim line)))
      (if (and (not (null? line))
               (not (string:starts-with line ";")))
        (let* ((kv    (string:split line ":"))
               (typer (types (string:trim (get-from kv 1 "id"))))
               (name  (string:trim (car kv))))
          (list 'define (string->symbol (++ "env:" name))
                        `(quote ,(typer (os:getenv name))))))))

  (define (env str)
    (let ((to-parse (cdr (string:split str "\n"))))
      (filter ($ (not (nil? %))) (map parse-env-elem to-parse))))

  (zepto:implements-lang env "env"))
